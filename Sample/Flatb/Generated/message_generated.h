// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MESSAGE_H_
#define FLATBUFFERS_GENERATED_MESSAGE_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct PingMsg;
struct PingMsgBuilder;

struct TextMsg;
struct TextMsgBuilder;

struct TransformPosition;
struct TransformPositionBuilder;

struct Message;
struct MessageBuilder;

enum MessageType : int32_t {
  MessageType_Ping = 0,
  MessageType_Text = 1,
  MessageType_Position = 2,
  MessageType_MIN = MessageType_Ping,
  MessageType_MAX = MessageType_Position
};

inline const MessageType (&EnumValuesMessageType())[3] {
  static const MessageType values[] = {
    MessageType_Ping,
    MessageType_Text,
    MessageType_Position
  };
  return values;
}

inline const char * const *EnumNamesMessageType() {
  static const char * const names[4] = {
    "Ping",
    "Text",
    "Position",
    nullptr
  };
  return names;
}

inline const char *EnumNameMessageType(MessageType e) {
  if (::flatbuffers::IsOutRange(e, MessageType_Ping, MessageType_Position)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesMessageType()[index];
}

enum MessageUnion : uint8_t {
  MessageUnion_NONE = 0,
  MessageUnion_PingMsg = 1,
  MessageUnion_TextMsg = 2,
  MessageUnion_TransformPosition = 3,
  MessageUnion_MIN = MessageUnion_NONE,
  MessageUnion_MAX = MessageUnion_TransformPosition
};

inline const MessageUnion (&EnumValuesMessageUnion())[4] {
  static const MessageUnion values[] = {
    MessageUnion_NONE,
    MessageUnion_PingMsg,
    MessageUnion_TextMsg,
    MessageUnion_TransformPosition
  };
  return values;
}

inline const char * const *EnumNamesMessageUnion() {
  static const char * const names[5] = {
    "NONE",
    "PingMsg",
    "TextMsg",
    "TransformPosition",
    nullptr
  };
  return names;
}

inline const char *EnumNameMessageUnion(MessageUnion e) {
  if (::flatbuffers::IsOutRange(e, MessageUnion_NONE, MessageUnion_TransformPosition)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesMessageUnion()[index];
}

template<typename T> struct MessageUnionTraits {
  static const MessageUnion enum_value = MessageUnion_NONE;
};

template<> struct MessageUnionTraits<PingMsg> {
  static const MessageUnion enum_value = MessageUnion_PingMsg;
};

template<> struct MessageUnionTraits<TextMsg> {
  static const MessageUnion enum_value = MessageUnion_TextMsg;
};

template<> struct MessageUnionTraits<TransformPosition> {
  static const MessageUnion enum_value = MessageUnion_TransformPosition;
};

bool VerifyMessageUnion(::flatbuffers::Verifier &verifier, const void *obj, MessageUnion type);
bool VerifyMessageUnionVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types);

struct PingMsg FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PingMsgBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TIME = 4
  };
  double time() const {
    return GetField<double>(VT_TIME, 0.0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<double>(verifier, VT_TIME, 8) &&
           verifier.EndTable();
  }
};

struct PingMsgBuilder {
  typedef PingMsg Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_time(double time) {
    fbb_.AddElement<double>(PingMsg::VT_TIME, time, 0.0);
  }
  explicit PingMsgBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PingMsg> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PingMsg>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<PingMsg> CreatePingMsg(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    double time = 0.0) {
  PingMsgBuilder builder_(_fbb);
  builder_.add_time(time);
  return builder_.Finish();
}

struct TextMsg FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef TextMsgBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MSG = 4
  };
  const ::flatbuffers::String *msg() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MSG);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_MSG) &&
           verifier.VerifyString(msg()) &&
           verifier.EndTable();
  }
};

struct TextMsgBuilder {
  typedef TextMsg Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_msg(::flatbuffers::Offset<::flatbuffers::String> msg) {
    fbb_.AddOffset(TextMsg::VT_MSG, msg);
  }
  explicit TextMsgBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<TextMsg> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<TextMsg>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<TextMsg> CreateTextMsg(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> msg = 0) {
  TextMsgBuilder builder_(_fbb);
  builder_.add_msg(msg);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<TextMsg> CreateTextMsgDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *msg = nullptr) {
  auto msg__ = msg ? _fbb.CreateString(msg) : 0;
  return CreateTextMsg(
      _fbb,
      msg__);
}

struct TransformPosition FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef TransformPositionBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_X = 4,
    VT_Y = 6,
    VT_Z = 8
  };
  float x() const {
    return GetField<float>(VT_X, 0.0f);
  }
  float y() const {
    return GetField<float>(VT_Y, 0.0f);
  }
  float z() const {
    return GetField<float>(VT_Z, 0.0f);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_X, 4) &&
           VerifyField<float>(verifier, VT_Y, 4) &&
           VerifyField<float>(verifier, VT_Z, 4) &&
           verifier.EndTable();
  }
};

struct TransformPositionBuilder {
  typedef TransformPosition Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_x(float x) {
    fbb_.AddElement<float>(TransformPosition::VT_X, x, 0.0f);
  }
  void add_y(float y) {
    fbb_.AddElement<float>(TransformPosition::VT_Y, y, 0.0f);
  }
  void add_z(float z) {
    fbb_.AddElement<float>(TransformPosition::VT_Z, z, 0.0f);
  }
  explicit TransformPositionBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<TransformPosition> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<TransformPosition>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<TransformPosition> CreateTransformPosition(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    float x = 0.0f,
    float y = 0.0f,
    float z = 0.0f) {
  TransformPositionBuilder builder_(_fbb);
  builder_.add_z(z);
  builder_.add_y(y);
  builder_.add_x(x);
  return builder_.Finish();
}

struct Message FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MessageBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PAYLOAD_TYPE = 4,
    VT_PAYLOAD = 6
  };
  MessageUnion payload_type() const {
    return static_cast<MessageUnion>(GetField<uint8_t>(VT_PAYLOAD_TYPE, 0));
  }
  const void *payload() const {
    return GetPointer<const void *>(VT_PAYLOAD);
  }
  template<typename T> const T *payload_as() const;
  const PingMsg *payload_as_PingMsg() const {
    return payload_type() == MessageUnion_PingMsg ? static_cast<const PingMsg *>(payload()) : nullptr;
  }
  const TextMsg *payload_as_TextMsg() const {
    return payload_type() == MessageUnion_TextMsg ? static_cast<const TextMsg *>(payload()) : nullptr;
  }
  const TransformPosition *payload_as_TransformPosition() const {
    return payload_type() == MessageUnion_TransformPosition ? static_cast<const TransformPosition *>(payload()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_PAYLOAD_TYPE, 1) &&
           VerifyOffset(verifier, VT_PAYLOAD) &&
           VerifyMessageUnion(verifier, payload(), payload_type()) &&
           verifier.EndTable();
  }
};

template<> inline const PingMsg *Message::payload_as<PingMsg>() const {
  return payload_as_PingMsg();
}

template<> inline const TextMsg *Message::payload_as<TextMsg>() const {
  return payload_as_TextMsg();
}

template<> inline const TransformPosition *Message::payload_as<TransformPosition>() const {
  return payload_as_TransformPosition();
}

struct MessageBuilder {
  typedef Message Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_payload_type(MessageUnion payload_type) {
    fbb_.AddElement<uint8_t>(Message::VT_PAYLOAD_TYPE, static_cast<uint8_t>(payload_type), 0);
  }
  void add_payload(::flatbuffers::Offset<void> payload) {
    fbb_.AddOffset(Message::VT_PAYLOAD, payload);
  }
  explicit MessageBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Message> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Message>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Message> CreateMessage(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    MessageUnion payload_type = MessageUnion_NONE,
    ::flatbuffers::Offset<void> payload = 0) {
  MessageBuilder builder_(_fbb);
  builder_.add_payload(payload);
  builder_.add_payload_type(payload_type);
  return builder_.Finish();
}

inline bool VerifyMessageUnion(::flatbuffers::Verifier &verifier, const void *obj, MessageUnion type) {
  switch (type) {
    case MessageUnion_NONE: {
      return true;
    }
    case MessageUnion_PingMsg: {
      auto ptr = reinterpret_cast<const PingMsg *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageUnion_TextMsg: {
      auto ptr = reinterpret_cast<const TextMsg *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageUnion_TransformPosition: {
      auto ptr = reinterpret_cast<const TransformPosition *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyMessageUnionVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (::flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyMessageUnion(
        verifier,  values->Get(i), types->GetEnum<MessageUnion>(i))) {
      return false;
    }
  }
  return true;
}

inline const Message *GetMessage(const void *buf) {
  return ::flatbuffers::GetRoot<Message>(buf);
}

inline const Message *GetSizePrefixedMessage(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<Message>(buf);
}

inline bool VerifyMessageBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Message>(nullptr);
}

inline bool VerifySizePrefixedMessageBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Message>(nullptr);
}

inline void FinishMessageBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Message> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedMessageBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Message> root) {
  fbb.FinishSizePrefixed(root);
}

#endif  // FLATBUFFERS_GENERATED_MESSAGE_H_
